import { Container } from './Container';
import { InkObject } from './Object';
import { StoryState } from './StoryState';
import { ChoicePoint } from './ChoicePoint';
import { Choice } from './Choice';
import { Path } from './Path';
import { ListDefinitionsOrigin } from './ListDefinitionsOrigin';
import { ListDefinition } from './ListDefinition';
import { Pointer } from './Pointer';
import { JObject } from './JObject';
import { DebugMetadata } from './DebugMetadata';
export { InkList } from './InkList';
export declare class Story extends InkObject {
    inkVersionCurrent: number;
    inkVersionMinimumCompatible: number;
    readonly currentChoices: Choice[];
    readonly currentText: string | null;
    readonly currentTags: string[] | null;
    readonly currentErrors: string[] | null;
    readonly currentWarnings: string[] | null;
    readonly hasError: boolean;
    readonly hasWarning: boolean;
    readonly variablesState: import("./VariablesState").VariablesState;
    readonly listDefinitions: ListDefinitionsOrigin | null;
    readonly state: StoryState;
    StartProfiling(): void;
    EndProfiling(): void;
    constructor(contentContainer: Container, lists: ListDefinition[] | null);
    constructor(jsonString: string);
    constructor(json: JObject);
    ToJsonString(): string;
    ResetState(): void;
    ResetErrors(): undefined;
    ResetCallstack(): undefined;
    ResetGlobals(): void;
    Continue(): string | null;
    readonly canContinue: boolean;
    readonly asyncContinueComplete: boolean;
    ContinueAsync(millisecsLimitAsync: number): void;
    ContinueInternal(millisecsLimitAsync?: number): void;
    ContinueSingleStep(): boolean;
    CalculateNewlineOutputStateChange(prevText: string | null, currText: string | null, prevTagCount: number, currTagCount: number): Story.OutputStateChange;
    ContinueMaximally(): string;
    ContentAtPath(path: Path): import("./SearchResult").SearchResult;
    KnotContainerWithName(name: string): Container | null;
    PointerAtPath(path: Path): Pointer;
    StateSnapshot(): StoryState;
    RestoreStateSnapshot(state: StoryState): void;
    Step(): void;
    VisitContainer(container: Container, atStart: boolean): void;
    private _prevContainers;
    VisitChangedContainersDueToDivert(): void;
    ProcessChoice(choicePoint: ChoicePoint): Choice | null;
    IsTruthy(obj: InkObject): boolean;
    PerformLogicAndFlowControl(contentObj: InkObject | null): boolean;
    ChoosePathString(path: string, resetCallstack?: boolean, args?: any[]): void;
    IfAsyncWeCant(activityStr: string): void;
    ChoosePath(p: Path, incrementingTurnIndex?: boolean): void;
    ChooseChoiceIndex(choiceIdx: number): undefined;
    HasFunction(functionName: string): boolean;
    EvaluateFunction(functionName: string, args?: any[], returnTextOutput?: boolean): Story.EvaluateFunctionTextOutput | any;
    EvaluateExpression(exprContainer: Container): InkObject | null;
    allowExternalFunctionFallbacks: boolean;
    CallExternalFunction(funcName: string | null, numberOfArguments: number): undefined;
    BindExternalFunctionGeneral(funcName: string, func: Story.ExternalFunction): void;
    TryCoerce(value: any): any;
    BindExternalFunction(funcName: string, func: Story.ExternalFunction): void;
    UnbindExternalFunction(funcName: string): void;
    ValidateExternalBindings(): void;
    ValidateExternalBindings(c: Container | null, missingExternals: Set<string>): void;
    ValidateExternalBindings(o: InkObject | null, missingExternals: Set<string>): void;
    ObserveVariable(variableName: string, observer: Story.VariableObserver): void;
    ObserveVariables(variableNames: string[], observers: Story.VariableObserver[]): void;
    RemoveVariableObserver(observer: Story.VariableObserver, specificVariableName: string): void;
    VariableStateDidChangeEvent(variableName: string, newValueObj: InkObject): void;
    readonly globalTags: string[] | null;
    TagsForContentAtPath(path: string): string[] | null;
    TagsAtStartOfFlowContainerWithPathString(pathString: string): string[] | null;
    BuildStringOfHierarchy(): string;
    BuildStringOfContainer(container: Container): string;
    NextContent(): void;
    IncrementContentPointer(): boolean;
    TryFollowDefaultInvisibleChoice(): boolean;
    VisitCountForContainer(container: Container | null): number;
    IncrementVisitCountForContainer(container: Container): void;
    RecordTurnIndexVisitToContainer(container: Container): void;
    TurnsSinceForContainer(container: Container): number;
    NextSequenceShuffleIndex(): number;
    Error(message: string, useEndLineNumber?: boolean): never;
    Warning(message: string): void;
    AddError(message: string, isWarning?: boolean, useEndLineNumber?: boolean): void;
    Assert(condition: boolean, message?: string | null): void;
    readonly currentDebugMetadata: DebugMetadata | null;
    readonly mainContentContainer: Container;
    /**
     * `_mainContentContainer` is almost guaranteed to be set in the
     * constructor, unless the json is malformed.
     */
    private _mainContentContainer;
    private _listDefinitions;
    private _externals;
    private _variableObservers;
    private _hasValidatedExternals;
    private _temporaryEvaluationContainer;
    /**
     * `state` is almost guaranteed to be set in the constructor, unless
     * using the compiler-specific constructor which will likely not be used in
     * the real world.
     */
    private _state;
    private _asyncContinueActive;
    private _stateAtLastNewline;
    private _recursiveContinueCount;
    private _profiler;
}
export declare namespace Story {
    enum OutputStateChange {
        NoChange = 0,
        ExtendedBeyondNewline = 1,
        NewlineRemoved = 2
    }
    interface EvaluateFunctionTextOutput {
        returned: any;
        output: string;
    }
    type VariableObserver = (variableName: string, newValue: any) => void;
    type ExternalFunction = (args: any[]) => any;
}
