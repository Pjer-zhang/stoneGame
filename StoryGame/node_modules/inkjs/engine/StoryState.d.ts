import { CallStack } from './CallStack';
import { VariablesState } from './VariablesState';
import { StringValue } from './Value';
import { PushPopType } from './PushPop';
import { Path } from './Path';
import { Pointer } from './Pointer';
import { Choice } from './Choice';
import { JObject } from './JObject';
import { Container } from './Container';
import { InkObject } from './Object';
import { Story } from './Story';
export declare class StoryState {
    readonly kInkSaveStateVersion = 8;
    readonly kMinCompatibleLoadVersion = 8;
    ToJson(indented?: boolean): string;
    toJson(indented?: boolean): string;
    LoadJson(json: string): void;
    VisitCountAtPathString(pathString: string): number | null;
    readonly callstackDepth: number;
    readonly outputStream: InkObject[];
    readonly currentChoices: Choice[];
    readonly generatedChoices: Choice[];
    readonly currentErrors: string[] | null;
    private _currentErrors;
    readonly currentWarnings: string[] | null;
    private _currentWarnings;
    readonly variablesState: VariablesState;
    private _variablesState;
    callStack: CallStack;
    readonly evaluationStack: InkObject[];
    private _evaluationStack;
    divertedPointer: Pointer;
    readonly visitCounts: Map<string, number>;
    private _visitCounts;
    readonly turnIndices: Map<string, number>;
    private _turnIndices;
    readonly currentTurnIndex: number;
    private _currentTurnIndex;
    storySeed: number;
    previousRandom: number;
    didSafeExit: boolean;
    story: Story;
    readonly currentPathString: string | null;
    currentPointer: Pointer;
    previousPointer: Pointer;
    readonly canContinue: boolean;
    readonly hasError: boolean;
    readonly hasWarning: boolean;
    readonly currentText: string | null;
    private _currentText;
    CleanOutputWhitespace(str: string): string;
    readonly currentTags: string[] | null;
    private _currentTags;
    inExpressionEvaluation: boolean;
    constructor(story: Story);
    GoToStart(): void;
    Copy(): StoryState;
    jsonToken: JObject;
    ResetErrors(): void;
    ResetOutput(objs?: InkObject[] | null): void;
    PushToOutputStream(obj: InkObject | null): void;
    PopFromOutputStream(count: number): void;
    TrySplittingHeadTailWhitespace(single: StringValue): StringValue[] | null;
    PushToOutputStreamIndividual(obj: InkObject | null): undefined;
    TrimNewlinesFromOutputStream(): void;
    RemoveExistingGlue(): void;
    readonly outputStreamEndsInNewline: boolean;
    readonly outputStreamContainsContent: boolean;
    readonly inStringEvaluation: boolean;
    PushEvaluationStack(obj: InkObject | null): undefined;
    PopEvaluationStack(): InkObject;
    PopEvaluationStack(numberOfObjects: number): InkObject[];
    PeekEvaluationStack(): InkObject;
    ForceEnd(): void;
    TrimWhitespaceFromFunctionEnd(): void;
    PopCallStack(popType?: PushPopType | null): void;
    SetChosenPath(path: Path, incrementingTurnIndex: boolean): void;
    StartFunctionEvaluationFromGame(funcContainer: Container, args: any[]): void;
    PassArgumentsToEvaluationStack(args: any[]): void;
    TryExitFunctionEvaluationFromGame(): boolean;
    CompleteFunctionEvaluationFromGame(): any;
    AddError(message: string, isWarning: boolean): void;
    OutputStreamDirty(): void;
    private _outputStream;
    private _outputStreamTextDirty;
    private _outputStreamTagsDirty;
    private _currentChoices;
}
