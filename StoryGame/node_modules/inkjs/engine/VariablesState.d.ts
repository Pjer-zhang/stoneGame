import { VariablePointerValue } from './Value';
import { VariableAssignment } from './VariableAssignment';
import { InkObject } from './Object';
import { ListDefinitionsOrigin } from './ListDefinitionsOrigin';
import { CallStack } from './CallStack';
export declare class VariablesState {
    variableChangedEventCallbacks: Array<(variableName: string, newValue: InkObject) => void>;
    variableChangedEvent(variableName: string, newValue: InkObject): void;
    batchObservingVariableChanges: boolean;
    callStack: CallStack;
    private _batchObservingVariableChanges;
    $(variableName: string, value: InkObject): any;
    constructor(callStack: CallStack, listDefsOrigin: ListDefinitionsOrigin | null);
    CopyFrom(toCopy: VariablesState): undefined;
    jsonToken: import("./JObject").JObject;
    TryGetDefaultVariableValue(name: string | null): InkObject | null;
    GlobalVariableExistsWithName(name: string): boolean;
    GetVariableWithName(name: string | null, contextIndex?: number): InkObject | null;
    GetRawVariableWithName(name: string | null, contextIndex: number): InkObject | null;
    ValueAtVariablePointer(pointer: VariablePointerValue): InkObject | null;
    Assign(varAss: VariableAssignment, value: InkObject): undefined;
    SnapshotDefaultGlobals(): void;
    RetainListOriginsForAssignment(oldValue: InkObject, newValue: InkObject): void;
    SetGlobal(variableName: string | null, value: InkObject): undefined;
    ResolveVariablePointer(varPointer: VariablePointerValue): VariablePointerValue;
    GetContextIndexOfVariableNamed(varName: string): number;
    /**
     * This function is specific to the js version of ink. It allows to register a
     * callback that will be called when a variable changes. The original code uses
     * `state.variableChangedEvent += callback` instead.
     * @param {function} callback
     */
    ObserveVariableChange(callback: (variableName: string, newValue: InkObject) => void): void;
    private _globalVariables;
    private _defaultGlobalVariables;
    private _callStack;
    private _changedVariables;
    private _listDefsOrigin;
}
