import { InkObject } from './Object';
import { Path } from './Path';
import { InkList, InkListItem } from './InkList';
import { StoryException } from './StoryException';
export declare abstract class AbstractValue extends InkObject {
    abstract readonly valueType: ValueType;
    abstract readonly isTruthy: boolean;
    abstract readonly valueObject: any;
    abstract Cast(newType: ValueType): Value<any>;
    static Create(val: any): Value<any> | null;
    Copy(): InkObject;
    BadCastException(targetType: ValueType): StoryException;
}
export declare abstract class Value<T> extends AbstractValue {
    value: T | null;
    constructor(val: T | null);
    readonly valueObject: T | null;
    toString(): string;
}
export declare class IntValue extends Value<number> {
    constructor(val: number);
    readonly isTruthy: boolean;
    readonly valueType: ValueType;
    Cast(newType: ValueType): Value<any>;
}
export declare class FloatValue extends Value<number> {
    constructor(val: number);
    readonly isTruthy: boolean;
    readonly valueType: ValueType;
    Cast(newType: ValueType): Value<any>;
}
export declare class StringValue extends Value<string> {
    _isNewline: boolean;
    _isInlineWhitespace: boolean;
    constructor(val: string);
    readonly valueType: ValueType;
    readonly isTruthy: boolean;
    readonly isNewline: boolean;
    readonly isInlineWhitespace: boolean;
    readonly isNonWhitespace: boolean;
    Cast(newType: ValueType): Value<any>;
}
export declare class DivertTargetValue extends Value<Path> {
    constructor(targetPath: Path);
    readonly valueType: ValueType;
    targetPath: Path;
    readonly isTruthy: never;
    Cast(newType: ValueType): Value<any>;
    toString(): string;
}
export declare class VariablePointerValue extends Value<string> {
    _contextIndex: number;
    constructor(variableName: string, contextIndex?: number);
    contextIndex: number;
    variableName: string;
    readonly valueType: ValueType;
    readonly isTruthy: never;
    Cast(newType: ValueType): Value<any>;
    toString(): string;
    Copy(): VariablePointerValue;
}
export declare class ListValue extends Value<InkList> {
    readonly isTruthy: boolean;
    readonly valueType: ValueType;
    Cast(newType: ValueType): Value<any>;
    constructor();
    constructor(list: InkList);
    constructor(listOrSingleItem: InkListItem, singleValue: number);
    static RetainListOriginsForAssignment(oldValue: InkObject | null, newValue: InkObject): undefined;
}
export declare enum ValueType {
    Int = 0,
    Float = 1,
    List = 2,
    String = 3,
    DivertTarget = 4,
    VariablePointer = 5
}
